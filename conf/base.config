// basic information about the workflow
manifest {
  name = 'apex-nf'
  description = 'APEX: Automated Protein EXpression in Escherichia Coli'
  version = '0.3.1'
  homePage = 'https://github.com/stracquadaniolab/apex-nf.git'
  author = 'Martyna Kasprzyk'
  nextflowVersion = '>=20.07.1'
}

// default configuration
executor {
	name = 'local'
	cpus   = 4
	memory = 8.GB
  queueSize = 5
}

process {
	executor = 'local'
	cpus = 2
	memory = 4.GB
	shell = ['/bin/bash', '-euo', 'pipefail']
}

// Export this variable to prevent local Python libraries
// from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// profiles to setup runtimes, executors, and process resources
profiles {

    docker {
        docker.enabled         = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        process.container = "ghcr.io/stracquadaniolab/apex-nf:0.3.1"
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        process.container = "docker://ghcr.io/stracquadaniolab/apex-nf:0.3.1"
    }

    slurm {
        process.executor='slurm'
        process.queue='compute'
    }

    amd64 {
      docker.runOptions = '--platform linux/amd64'
    }    

    ci {
        executor.name = 'local'
        executor.cpus   = 2
        executor.memory = 6.GB
        executor.queueSize = 5

        process.executor = 'local'
        process.cpus = 1
        process.memory = 2.GB
        process.shell = ['/bin/bash', '-euo', 'pipefail']
    }

    // profile containing dummy data to test the workflow
    test {
        params {
          protocol_template_dir = "${baseDir}/assets/protocols"
          instructions_dir = "${baseDir}/assets/instructions"
          opentrons_labware_dir = "${baseDir}/assets/labware"
          resultsDir = "./results/"

          protocol_1_config = "${baseDir}/assets/testdata/protocol-1-config.json"
          protocol_1_data = "${baseDir}/assets/testdata/protocol-1-data.csv"
          protocol_1_instructions = "${baseDir}/assets/instructions/protocol-1-instructions.Rmd"

          protocol_2_config = "${baseDir}/assets/testdata/protocol-2-config.json"
          protocol_2_data = "${baseDir}/assets/testdata/protocol-2-data.csv"
          protocol_2_instructions = "${baseDir}/assets/instructions/protocol-2-instructions.Rmd"

          protocol_3_config = "${baseDir}/assets/testdata/protocol-3-config.json"
          protocol_3_data = "${baseDir}/assets/testdata/protocol-3-data.csv"
          protocol_3_instructions = "${baseDir}/assets/instructions/protocol-3-instructions.Rmd"

          protocol_4_config = "${baseDir}/assets/testdata/protocol-4-config.json"
          protocol_4_data = "${baseDir}/assets/testdata/protocol-4-data.csv"
          protocol_4_instructions = "${baseDir}/assets/instructions/protocol-4-instructions.Rmd"

        }
    }
}
// configuring log information
report {
    enabled = true
    overwrite = true
    file = "logs/execution_report.html"
}